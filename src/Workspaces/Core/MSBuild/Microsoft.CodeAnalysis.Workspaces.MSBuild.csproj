<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <RootNamespace>Microsoft.CodeAnalysis</RootNamespace>
    <TargetFrameworks>$(SourceBuildTargetFrameworks);net472</TargetFrameworks>
    <DefineConstants>$(DefineConstants);WORKSPACE_MSBUILD</DefineConstants>
    <!-- NuGet -->
    <IsPackable>true</IsPackable>
    <PackageDescription>
      .NET Compiler Platform ("Roslyn") support for analyzing MSBuild projects and solutions. This should be used with at least one
      of the following packages to add the appropriate language support:
      - Microsoft.CodeAnalysis.CSharp.Workspaces
      - Microsoft.CodeAnalysis.VisualBasic.Workspaces
    </PackageDescription>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Build" Version="$(RefOnlyMicrosoftBuildVersion)" ExcludeAssets="Runtime" PrivateAssets="All" />
    <PackageReference Include="Microsoft.Build.Framework" Version="$(RefOnlyMicrosoftBuildFrameworkVersion)" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.Build.Tasks.Core" Version="$(RefOnlyMicrosoftBuildTasksCoreVersion)" ExcludeAssets="Runtime" PrivateAssets="All" />
    <PackageReference Include="System.Text.Json" Version="$(SystemTextJsonVersion)" />
    <PackageReference Include="StreamJsonRpc" Version="$(StreamJsonRpcVersion)" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj" />
    <ProjectReference Include="..\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\Portable\Microsoft.CodeAnalysis.Workspaces.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PublicAPI Include="PublicAPI.Shipped.txt" />
    <PublicAPI Include="PublicAPI.Unshipped.txt" />
  </ItemGroup>
  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.LanguageServer" />
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.Workspaces.Test.Utilities" />
    <InternalsVisibleTo Include="Microsoft.CodeAnalysis.Workspaces.MSBuild.UnitTests" />
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(MoqPublicKey)" LoadsWithinVisualStudio="false" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="WorkspaceMSBuildResources.resx" GenerateSource="true" />
  </ItemGroup>
  <!--
    Include the BuildHost binaries into this package as well as a regular library. At the moment, we're including it in lib because we're internally using it as a library in-process for a few of our 
    RPC interfaces with our remote process.
    -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);GetBuildHostBinaries</TargetsForTfmSpecificBuildOutput>
    <TargetsForTfmSpecificDebugSymbolsInPackage>$(TargetsForTfmSpecificBuildOutput);GetBuildHostDebugSymbols</TargetsForTfmSpecificDebugSymbolsInPackage>
  </PropertyGroup>
  <Target Name="GetBuildHostBinaries" DependsOnTargets="ResolveReferences">
      <MSBuild Projects="..\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj" Targets="_GetBuildOutputFilesWithTfm">
        <Output TaskParameter="TargetOutputs" ItemName="BuildOutputInPackage" />
      </MSBuild>
  </Target>
  <Target Name="GetBuildHostDebugSymbols">
    <MSBuild Projects="..\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj" Targets="_GetDebugSymbolsWithTfm">
      <Output TaskParameter="TargetOutputs" ItemName="_TargetPathsToSymbolsWithTfm" />
    </MSBuild>
  </Target>

  <!--
    Deploy a net472 and net6.0 version of the BuildHost process which will be used depending on the type of project. We will use the deployed version even if
    it matches the runtime of the caller of MSBuildWorkspace since we still need the separate process for dependency isolation and in the case of the .NET Core
    side, ensuring we potential rollforward to a runtime that supports the SDK version.
  -->
  <Target Name="DeployNetFrameworkBuildHost" AfterTargets="ResolveProjectReferences" Condition="'$(DesignTimeBuild)' != 'true'">
    <ItemGroup>
      <_NetFrameworkBuildHostProjectReference Include="..\..\..\Workspaces\Core\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj">
        <TargetFramework>net472</TargetFramework>
      </_NetFrameworkBuildHostProjectReference>
      <_NetFrameworkBuildHostProjectReference Include="..\..\..\Workspaces\Core\MSBuild.BuildHost\Microsoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.csproj">
        <TargetFramework>net6.0</TargetFramework>
      </_NetFrameworkBuildHostProjectReference>
    </ItemGroup>

    <!-- We include Build as a target we invoke to work around https://github.com/dotnet/msbuild/issues/5433  -->
    <MSBuild Projects="@(_NetFrameworkBuildHostProjectReference)"
             Targets="Build;BuiltProjectOutputGroup;ReferenceCopyLocalPathsOutputGroup"
             Properties="TargetFramework=%(_NetFrameworkBuildHostProjectReference.TargetFramework)">
      <Output TaskParameter="TargetOutputs" ItemName="NetFrameworkBuildHostAssets" />
    </MSBuild>

    <ItemGroup>
      <Content Include="%(NetFrameworkBuildHostAssets.Identity)"
               Condition="'%(NetFrameworkBuildHostAssets.TargetPath)' != '' and '%(NetFrameworkBuildHostAssets.Extension)' != '.xml'"
               TargetPath="BuildHost-%(NetFrameworkBuildHostAssets.TargetFramework)\%(NetFrameworkBuildHostAssets.TargetPath)"
               CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
</Project>